{"version":3,"sources":["lib.js","message.js","main.js"],"names":["irregularVerbsList","verbsList","adverbsList","phrasalVerbsList","adjectivesList","Array","prototype","deepReverse","temp","i","this","length","slice","map","elem","reverse","shuffle","j","x","Math","floor","random","titleEnd","subtitleEnd","props","engrus","game","readAndListen","listen","words","ran","ver","irr","adv","adj","phv","strFilter","loader","page","helpIcon","themeIcon","gameIcon","testIcon","modal","modalTitle","modalText","modalData","modalClose","menu","correctCounter","newList","nextWord","versions","strNewWord","strPercent","progress","mp3","path","word","check","ok","err","limitWords","currentWord","percent","numbersTry","correctWord","toogleTheme","dataset","theme","classList","toggle","style","setProperty","getValueProps","selector","document","querySelector","checked","getFilterList","list","value","limit","Number","isInteger","reg","toLowerCase","regExp","RegExp","test","push","toogleElement","clazz","addElement","add","removeElement","remove","setCorrect","toFixed","textContent","backgroundColor","toString","join","getColor","width","background","shuffleMulti","arr","one","renderWords","bool","src","firstVerb","phrasal","substr","split","replace","setPathSound","playAudio","variants","tempArr","vs","vss","vssRandom","isStart","elements","checkWord","element","hisClass","theirClass","isCorrect","setTimeout","innerHTML","_loop","isError","play","letsGo","filterSumList","flag","randomList","concat","forEach","getWordsList","addEventListener","querySelectorAll","parentNode","removeChild"],"mappings":"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","file":"script.min.js","sourcesContent":["let irregularVerbsList = [\n\t['irr_быть', 'be, was/were, been'],\n\t['irr_бить', 'beat, beat, beaten'],\n\t['irr_становиться', 'become, became, become'],\n\t['irr_начинать', 'begin, began, begun'],\n\t['irr_кусать', 'bite, bit, bitten'],\n\t['irr_дуть', 'blow, blew, blown'],\n\t['irr_ломать', 'break, broke, broken'],\n\t['irr_приносить', 'bring, brought, brought'],\n\t['irr_строить', 'build, built, built'],\n\t['irr_покупать', 'buy, bought, bought'],\n\t['irr_ловить', 'catch, caught, caught'],\n\t['irr_выбирать', 'choose, chose, chosen'],\n\t['irr_приходить', 'come, came, come'],\n\t['irr_стоить', 'cost, cost, cost'],\n\t['irr_резать', 'cut, cut, cut'],\n\t['irr_делать', 'do, did, done'],\n\t['irr_рисовать', 'draw, drew, drawn'],\n\t['irr_пить', 'drink, drank, drunk'],\n\t['irr_водить машину', 'drive, drove, driven'],\n\t['irr_есть', 'eat, ate, eaten'],\n\t['irr_падать', 'fall, fell, fallen'],\n\t['irr_чувствовать', 'feel, felt, felt'],\n\t['irr_бороться', 'fight, fought, fought'],\n\t['irr_находить', 'find, found, found'],\n\t['irr_летать', 'fly, flew, flown'],\n\t['irr_забывать', 'forget, forgot, forgotten'],\n\t['irr_получать', 'get, got, got'],\n\t['irr_давать', 'give, gave, given'],\n\t['irr_направляться', 'go, went, gone'],\n\t['irr_расти', 'grow, grew, grown'],\n\t['irr_вешать', 'hang, hung, hung'],\n\t['irr_иметь', 'have, had, had'],\n\t['irr_слышать', 'hear, heard, heard'],\n\t['irr_прятать', 'hide, hid, hidden'],\n\t['irr_попадать в цель', 'hit, hit, hit'],\n\t['irr_держать', 'hold, held, held'],\n\t['irr_причинять боль', 'hurt, hurt, hurt'],\n\t['irr_хранить', 'keep, kept, kept'],\n\t['irr_знать', 'know, knew, known'],\n\t['irr_оставлять', 'leave, left, left'],\n\t['irr_давать в долг', 'lend, lent, lent'],\n\t['irr_позволять', 'let, let, let'],\n\t['irr_лежать', 'lie, lay, lain'],\n\t['irr_освещать', 'light, lit, lit'],\n\t['irr_терять', 'lose, lost, lost'],\n\t['irr_производить', 'make, made, made'],\n\t['irr_значить', 'mean, meant, meant'],\n\t['irr_встречать', 'meet, met, met'],\n\t['irr_платить', 'pay, paid, paid'],\n\t['irr_ставить', 'put, put, put'],\n\t['irr_читать', 'read, read, read'],\n\t['irr_ездить верхом', 'ride, rode, ridden'],\n\t['irr_звенеть', 'ring, rang, rung'],\n\t['irr_подниматься', 'rise, rose, risen'],\n\t['irr_бежать', 'run, ran, run'],\n\t['irr_говорить', 'say, said, said'],\n\t['irr_видеть', 'see, saw, seen'],\n\t['irr_продавать', 'sell, sold, sold'],\n\t['irr_посылать', 'send, sent, sent'],\n\t['irr_светить', 'shine, shone, shone'],\n\t['irr_стрелять', 'shoot, shot, shot'],\n\t['irr_показывать', 'show, showed, shown'],\n\t['irr_закрывать', 'shut, shut, shut'],\n\t['irr_петь', 'sing, sang, sung'],\n\t['irr_сидеть', 'sit, sat, sat'],\n\t['irr_спать', 'sleep, slept, slept'],\n\t['irr_говорить', 'speak, spoke, spoken'],\n\t['irr_тратить', 'spend, spent, spent'],\n\t['irr_стоять', 'stand, stood, stood'],\n\t['irr_красть', 'steal, stole, stolen'],\n\t['irr_плавать', 'swim, swam, swum'],\n\t['irr_брать, взять', 'take, took, taken'],\n\t['irr_учить', 'teach, taught, taught'],\n\t['irr_рвать', 'tear, tore, torn'],\n\t['irr_рассказывать', 'tell, told, told'],\n\t['irr_думать', 'think, thought, thought'],\n\t['irr_бросать', 'throw, threw, thrown'],\n\t['irr_понимать', 'understand, understood, understood'],\n\t['irr_просыпаться', 'wake, woke, woken'],\n\t['irr_носить одежду', 'wear, wore, worn'],\n\t['irr_побеждать', 'win, won, won'],\n\t['irr_писать', 'write, wrote, written']\n];\n\nlet verbsList = [\n\t['ver_принимать', 'accept'],\n\t['ver_признавать', 'admit'],\n\t['ver_советовать', 'advise'],\n\t['ver_соглашаться', 'agree'],\n\t['ver_позволять', 'allow'],\n\t['ver_развлекать', 'amuse'],\n\t['ver_раздражать', 'annoy'],\n\t['ver_отвечать', 'answer'],\n\t['ver_извиняться', 'apologize'],\n\t['ver_приехать', 'arrive'],\n\t['ver_спрашивать', 'ask'],\n\t['ver_привлекать', 'attract'],\n\t['ver_бороться', 'battle'],\n\t['ver_верить', 'believe'],\n\t['ver_краснеть', 'blush'],\n\t['ver_занимать', 'borrow'],\n\t['ver_гудеть', 'buzz'],\n\t['ver_звонить', 'call'],\n\t['ver_мочь', 'can'],\n\t['ver_отменить', 'cancel'],\n\t['ver_нести', 'carry'],\n\t['ver_менять', 'change'],\n\t['ver_требовать', 'claim'],\n\t['ver_чистить', 'clean'],\n\t['ver_закрывать', 'close'],\n\t['ver_собирать', 'collect'],\n\t['ver_расчесывать', 'comb'],\n\t['ver_общаться', 'communicate'],\n\t['ver_жаловаться', 'complain'],\n\t['ver_готовить', 'cook'],\n\t['ver_копировать', 'copy'],\n\t['ver_кашлять', 'cough'],\n\t['ver_танцевать', 'dance'],\n\t['ver_решать', 'decide'],\n\t['ver_обсуждать', 'discuss'],\n\t['ver_наслаждаться', 'enjoy'],\n\t['ver_объяснять', 'explain'],\n\t['ver_заполнить', 'fill'],\n\t['ver_заканчивать', 'finish'],\n\t['ver_соответствовать', 'fit'],\n\t['ver_фиксировать', 'fix'],\n\t['ver_следовать', 'follow'],\n\t['ver_светиться', 'glow'],\n\t['ver_схватить', 'grip'],\n\t['ver_управлять', 'handle'],\n\t['ver_случаться', 'happen'],\n\t['ver_помогать', 'help'],\n\t['ver_нравиться', 'like'],\n\t['ver_слушать', 'listen'],\n\t['ver_жить', 'live'],\n\t['ver_выглядеть', 'look'],\n\t['ver_двигать', 'move'],\n\t['ver_нуждаться', 'need'],\n\t['ver_открывать', 'open'],\n\t['ver_организовывать', 'organise'],\n\t['ver_играть', 'play'],\n\t['ver_обещать', 'promise'],\n\t['ver_литься', 'rain'],\n\t['ver_ответить', 'reply'],\n\t['ver_подписывать', 'sign'],\n\t['ver_курить', 'smoke'],\n\t['ver_произносить по буквам', 'spell'],\n\t['ver_oстанавливать', 'stop'],\n\t['ver_учиться', 'study'],\n\t['ver_быть успешным', 'succeed'],\n\t['ver_предлагать', 'suggest'],\n\t['ver_говорить', 'talk'],\n\t['ver_переводить', 'translate'],\n\t['ver_путешествовать', 'travel'],\n\t['ver_пытаться', 'try'],\n\t['ver_печатать', 'type'],\n\t['ver_использовать', 'use'],\n\t['ver_ждать', 'wait'],\n\t['ver_хотеть', 'want'],\n\t['ver_смотреть', 'watch'],\n\t['ver_махать', 'wave'],\n\t['ver_работать', 'work'],\n\t['ver_беспокоиться', 'worry']\n];\n\nlet adverbsList = [\n\t['adv_наверху','above'],\n\t['adv_случайно','accidentally'],\n\t['adv_соответственно','according'],\n\t['adv_фактически','actually'],\n\t['adv_опять','again'],\n\t['adv_почти','almost'],\n\t['adv_уже','already'],\n\t['adv_также','also'],\n\t['adv_всегда','always'],\n\t['adv_высокомерно','arrogantly'],\n\t['adv_плохо','badly'],\n\t['adv_красиво','beautifully'],\n\t['adv_до','before'],\n\t['adv_ниже','below'],\n\t['adv_кроме того','besides'],\n\t['adv_вслепую','blindly'],\n\t['adv_хвастливо','boastfully'],\n\t['adv_кратко','briefly'],\n\t['adv_ярко','brightly'],\n\t['adv_широко','broadly'],\n\t['adv_тщательно','carefully'],\n\t['adv_осторожно','cautiously'],\n\t['adv_конечно','certainly'],\n\t['adv_ясно','clearly'],\n\t['adv_умно','cleverly'],\n\t['adv_красочно','colourfully'],\n\t['adv_обычно','commonly'],\n\t['adv_правильно','correctly'],\n\t['adv_смело','courageously'],\n\t['adv_ежедневно','daily'],\n\t['adv_изящно','daintily'],\n\t['adv_обманчиво','deceivingly'],\n\t['adv_глубоко','deeply'],\n\t['adv_вызывающе','defiantly'],\n\t['adv_восхитительно','delightfully'],\n\t['adv_сомнительно','doubtfully'],\n\t['adv_мечтательно','dreamily'],\n\t['adv_легко','easily'],\n\t['adv_энергично','energetically'],\n\t['adv_с энтузиазмом','enthusiastically'],\n\t['adv_одинаково','equally'],\n\t['adv_особенно','especially'], \n\t['adv_даже','even'],\n\t['adv_равномерно','evenly'], \n\t['adv_в конце концов','eventually'], \n\t['adv_когда-либо','ever'],\n\t['adv_точно','exactly'],\n\t['adv_взволнованно','excitedly'], \n\t['adv_нежно','fondly'], \n\t['adv_глупо','foolishly'], \n\t['adv_к счастью','fortunately'], \n\t['adv_вперед','forward'], \n\t['adv_дружелюбно','friendly'], \n\t['adv_жадно','greedily'], \n\t['adv_счастливо','happily'], \n\t['adv_с торудом','hardly'], \n\t['adv_честно','honestly'],\n\t['adv_в самом деле','indeed'], \n\t['adv_невинно','innocently'], \n\t['adv_внутри','inside'], \n\t['adv_вместо','instead'], \n\t['adv_справедливо','justly'], \n\t['adv_любезно','kindly'], \n\t['adv_недавно','lately'], \n\t['adv_лениво','lazily'], \n\t['adv_меньше','less'], \n\t['adv_свободно','loosely'], \n\t['adv_громко','loudly'], \n\t['adv_безумно','madly'], \n\t['adv_около','nearly'], \n\t['adv_никогда','never'], \n\t['adv_изредка','occasionally'], \n\t['adv_часто','often'], \n\t['adv_раз','once'], \n\t['adv_только','only'],\n\t['adv_отлично','perfectly'],\t\n\t['adv_возможно','perhaps'],\t\n\t['adv_вежливо','politely'],\t\n\t['adv_вероятно','probably'],\t\n\t['adv_быстро','quickly'],\t\n\t['adv_нечасто','rarely'],\t\n\t['adv_довольно','rather'],\t\n\t['adv_действительно','really'],\t\n\t['adv_регулярно','regularly'],\t\n\t['adv_редко','seldom'],\t\n\t['adv_серьезно','seriously'],\t\n\t['adv_медленно','slowly'],\t\n\t['adv_как-то','somehow'],\t\n\t['adv_иногда','sometimes'],\t\n\t['adv_где-то','somewhere'],\t\n\t['adv_скоро','soon'],\t\n\t['adv_насквозь','through'],\t\n\t['adv_таким образом','thus'],\t\n\t['adv_сегодня','today'],\t\n\t['adv_завтра','tomorrow'],\t\n\t['adv_очень','very'],\t\n\t['adv_тепло','warmly'],\t\n\t['adv_слабо','weakly'],\t\n\t['adv_вчера','yesterday']\n];\n\nlet phrasalVerbsList = [\n\t['phv_отступать', 'back away'],\n\t['phv_возвращаться', 'be back'],\n\t['phv_покидать', 'be off'],\n\t['phv_отсутствовать', 'be out'],\n\t['phv_окончиться', 'be over'],\n\t['phv_собираться', 'be up to'],\n\t['phv_разбиться вдребезги', 'blow out'],\n\t['phv_взорвать', 'blow up'],\n\t['phv_сломаться', 'break down'],\n\t['phv_разрывать отношения', 'break up'],\n\t['phv_перезвонить', 'call back'],\n\t['phv_отозвать', 'call off'],\n\t['phv_успокоиться', 'calm down'],\n\t['phv_носить с собой', 'carry around'],\n\t['phv_продолжаться', 'carry on'],\n\t['phv_осуществлять', 'carry out'],\n\t['phv_переносить', 'carry over'],\n\t['phv_регистрироваться', 'check in'],\n\t['phv_прибираться', 'clean up'],\n\t['phv_натолкнуться', 'come across'],\n\t['phv_идти вместе', 'come along'],\n\t['phv_происходить из', 'come from'],\n\t['phv_войдите', 'come in'],\n\t['phv_отрываться', 'come off'],\n\t['phv_давай!', 'come on'],\n\t['phv_приходить', 'come over'],\n\t['phv_рассчитывать на', 'count on'],\n\t['phv_отрезать', 'cut off'],\n\t['phv_закончить', 'end up'],\n\t['phv_выяснить', 'figure out'],\n\t['phv_обнаружить', 'find out'],\n\t['phv_преодолеть', 'get around'],\n\t['phv_перезванивать', 'get back'],\n\t['phv_спускаться', 'get down'],\n\t['phv_ладить', 'get on'],\n\t['phv_выбираться', 'get out'],\n\t['phv_справиться', 'get over'],\n\t['phv_вставать', 'get up'],\n\t['phv_сдаваться', 'give up'],\n\t['phv_уходить', 'go away'],\n\t['phv_входить', 'go in'],\n\t['phv_продолжать', 'go on'],\n\t['phv_выйти', 'go out'],\n\t['phv_пройти через', 'go through'],\n\t['phv_подниматься', 'go up'],\n\t['phv_вырастать', 'grow up'],\n\t['phv_вешать трубку', 'hang up'],\n\t['phv_протягивать', 'hold out'],\n\t['phv_поднимать', 'hold up'],\n\t['phv_поддерживать', 'keep up'],\n\t['phv_впустить', 'let in'],\n\t['phv_выпускать', 'let out'],\n\t['phv_лечь', 'lie down'],\n\t['phv_искать', 'look for'],\n\t['phv_предвкушать', 'look forward to'],\n\t['phv_высматривать', 'look out'],\n\t['phv_просматривать', 'look over'],\n\t['phv_составить', 'make up'],\n\t['phv_въехать', 'move in'],\n\t['phv_идти дальше', 'move on'],\n\t['phv_взять', 'pick up'],\n\t['phv_указывать', 'point out'],\n\t['phv_натягивать', 'pull on'],\n\t['phv_останавливать ...', 'pull up'],\n\t['phv_отказаться от мысли', 'put away'],\n\t['phv_опустить', 'put down'],\n\t['phv_вставить', 'put in'],\n\t['phv_надеть', 'put on'],\n\t['phv_строить', 'put up'],\n\t['phv_убегать', 'run away'],\n\t['phv_столкнуться', 'run into'],\n\t['phv_сбегать', 'run off'],\n\t['phv_высаживать', 'set down'],\n\t['phv_поселяться', 'settle down'],\n\t['phv_появляться', 'show up'],\n\t['phv_закрыть', 'shut down'],\n\t['phv_заставить замолчать', 'shut up'],\n\t['phv_садиться', 'sit down'],\n\t['phv_приподняться', 'sit up'],\n\t['phv_рассыпаться', 'spread out'],\n\t['phv_быть наготове', 'stand by'],\n\t['phv_вставать', 'stand up'],\n\t['phv_включить питание', 'switch on'],\n\t['phv_забирать', 'take away'],\n\t['phv_взять обратно', 'take back'],\n\t['phv_взлететь', 'take off'],\n\t['phv_приобретать', 'take on'],\n\t['phv_вынимать', 'take out'],\n\t['phv_перенимать', 'take over'],\n\t['phv_превращаться', 'turn into'],\n\t['phv_выключить', 'turn off'],\n\t['phv_включaть', 'turn on'],\n\t['phv_оказаться', 'turn out'],\n\t['phv_переворачивать', 'turn over'],\n\t['phv_проснуться', 'wake up'],\n\t['phv_входить без ведома', 'walk in'],\n\t['phv_легко побеждать', 'walk over'],\n\t['phv_обрабатывать', 'work up'],\n\t['phv_записывать', 'write down']\n];\n\nlet adjectivesList = [\n\t['adj_боящийся', 'afraid'],\n\t['adj_живой', 'alive'],\n\t['adj_сердитый', 'angry'],\n\t['adj_отвратительный', 'awful'],\n\t['adj_плохой', 'bad'],\n\t['adj_красивый', 'beautiful'],\n\t['adj_большой', 'big'],\n\t['adj_скучающий', 'bored'],\n\t['adj_храбрый', 'brave'],\n\t['adj_яркий', 'bright'],\n\t['adj_сломанный', 'broken'],\n\t['adj_занятый', 'busy'],\n\t['adj_спокойный', 'calm'],\n\t['adj_осторожный', 'careful'],\n\t['adj_чистый', 'clean'],\n\t['adj_ясный', 'clear'],\n\t['adj_умный', 'clever'],\n\t['adj_холодный', 'cold'],\n\t['adj_удобный', 'comfortable'],\n\t['adj_сумасшедший', 'crazy'],\n\t['adj_жестокий', 'cruel'],\n\t['adj_любопытный', 'curious'],\n\t['adj_опасный', 'dangerous'],\n\t['adj_темный', 'dark'],\n\t['adj_мертвый', 'dead'],\n\t['adj_подавленный', 'depressed'],\n\t['adj_определенный', ' determined'],\n\t['adj_другой', 'different'],\n\t['adj_трудный', 'difficult'],\n\t['adj_грязный', 'dirty'],\n\t['adj_нарушенный', 'disturbed'],\n\t['adj_сухой', 'dry'],\n\t['adj_ранний', 'early'],\n\t['adj_легкий', 'easy'],\n\t['adj_смущенный', 'embarrassed'],\n\t['adj_восторженный', 'enthusiastic'],\n\t['adj_злой', 'evil'],\n\t['adj_взволнованный', 'excited'],\n\t['adj_ложный', 'false'],\n\t['adj_известный', 'famous'],\n\t['adj_быстрый', 'fast'],\n\t['adj_прекрасный', 'fine'],\n\t['adj_безрассудный', 'foolish'],\n\t['adj_свежий', 'fresh'],\n\t['adj_дружелюбный', 'friendly'],\n\t['adj_смешной', 'funny'],\n\t['adj_хороший', 'good'],\n\t['adj_счастливый', 'happy'],\n\t['adj_тяжелый', 'hard'],\n\t['adj_здоровый', 'healthy'],\n\t['adj_пронзительный', 'high-pitched'],\n\t['adj_горячий', 'hot'],\n\t['adj_огромный', 'huge'],\n\t['adj_голодный', 'hungry'],\n\t['adj_важный', 'important'],\n\t['adj_невозможный', 'impossible'],\n\t['adj_крупный', 'large'],\n\t['adj_поздний', 'late'],\n\t['adj_небольшой', 'little'],\n\t['adj_одинокий', 'lonely'],\n\t['adj_длинный', 'long'],\n\t['adj_громкий', 'loud'],\n\t['adj_восхитительный', 'lovely'],\n\t['adj_везучий', 'lucky'],\n\t['adj_узкий', 'narrow'],\n\t['adj_новый', 'new'],\n\t['adj_милый', 'nice'],\n\t['adj_шумный', 'noisy'],\n\t['adj_старый', 'old'],\n\t['adj_идеальный', 'perfect'],\n\t['adj_приятный', 'pleasant'],\n\t['adj_бедный', 'poor'],\n\t['adj_гордый', 'proud'],\n\t['adj_скорый', 'quick'],\n\t['adj_тихий', 'quiet'],\n\t['adj_реальный', 'real'],\n\t['adj_богатый', 'rich'],\n\t['adj_безопасный', 'safe'],\n\t['adj_испуганный', 'scared'],\n\t['adj_короткий', 'short'],\n\t['adj_застенчивый', 'shy'],\n\t['adj_безмолвный', 'silent'],\n\t['adj_глупый', 'silly'],\n\t['adj_медленный', 'slow'],\n\t['adj_маленький', 'small'],\n\t['adj_мягкий', 'soft'],\n\t['adj_тупой', 'stupid'],\n\t['adj_успешный', 'successful'],\n\t['adj_высокий', 'tall'],\n\t['adj_вкусный', 'tasty'],\n\t['adj_ужасный', 'terrible'],\n\t['adj_крошечный', 'tiny'],\n\t['adj_уставший', 'tired'],\n\t['adj_уродливый', 'ugly'],\n\t['adj_несчастливый', 'unhappy'],\n\t['adj_слабый', 'weak'],\n\t['adj_злобный', 'wicked'],\n\t['adj_широкий', 'wide'],\n\t['adj_тревожный', 'worried'],\n\t['adj_молодой', 'young']\n];\n\n\n\n\nArray.prototype.deepReverse = function () {\n\tlet temp = [];\n\tfor (let i = 0; i < this.length; i++) {\n\t\ttemp[i] = this[i].slice();\n\t}\n\ttemp.map(function(elem) {\n\t\treturn elem.reverse();\n\t});\n\treturn temp;\n};\n\nArray.prototype.shuffle = function () {\n\tif (this.length == 1) {\n\t\treturn this;\n\t}\n\tfor (var j, x, i = this.length; i; j = Math.floor(Math.random() * i), x = this[--i], this[i] = this[j], this[j] = x);\n\treturn this;\n};\n","let title = '<p>1. Выбрать группу слов для изучения. Можно работать, как с отдельной группой слов, так и несколькими группами одновременно.</p><p>2. Выбрать направление ENG-RUS или RUS-ENG.</p><p>3. Выбрать метод тренировки: чтение и озвучивание слова или только на слух .</p>';\r\nlet subtitle = '<p >Можно формировать состав выбранной группы.</p><p ><strong>Пустое поле</strong> - все слова выбранной группы.</p><p ><strong>20</strong> - 20 случайных слов.</p><p ><strong>b-ery</strong> - слова, начинающиеся на буквы b, c, d, e, r, y.<p>';\r\n\r\nlet titleEnd = 'Выбранные Вами слова закончились.<br>Сформируйте новый список слов.';\r\nlet subtitleEnd = 'Ваш результат составил:';\r\n\r\nlet titleStart = 'Необходимо выбрать группу слов для изучения <br> и сформировать новый список слов.';\r\nlet subtitleStart = '';","let props = {\n\tengrus: true,\n\tgame: {\n\t\treadAndListen: true,\n\t\tlisten: false\n\t},\n\twords: {\n\t\tran: true,\n\t\tver: false,\n\t\tirr: false,\n\t\tadv: false,\n\t\tadj: false,\n\t\tphv: false\n\t},\n\tstrFilter: ''\n}\n\nlet loader = null,\n\tpage = null,\n\thelpIcon = null,\n\tthemeIcon = null,\n\tbackIcon = null,\n\tgameIcon = null,\n\ttestIcon = null,\n\tmodal = null,\n\tmodalTitle = null,\n\tmodalText = null,\n\tmodalData = null,\n\tmodalClose = null,\n\tbtnNew = null,\n\tsound = null,\n\tmenu = null,\n\tcorrectCounter = null,\n\tnewList = [],\n\tnextWord = [],\n\tversions = [],\n\tstrNewWord = null,\n\tstrPercent = null,\n\tprogress = null,\n\tmp3 = null,\n\tpath = {\n\t\tword: '',\n\t\tcheck: './audio/check.mp3',\n\t\tok: './audio/ok.mp3',\n\t\terr: './audio/error.mp3'\n\t},\n\tlimitWords = null,\n\tcurrentWord = null,\n\tpercent = null,\n\tnumbersTry = 0,\n\tcorrectWord = null;\n\nfunction delLoader() {\n\tsetTimeout(() => {\n\t\tloader.parentNode.removeChild(loader);\n\t}, 500);\n}\nfunction toogleTheme() {\n\tif (!page.dataset.theme) {\n\t\tpage.dataset.theme = 'dark';\n\t\tthemeIcon.classList.toggle('icons__theme--moon');\n\t\tpage.style.setProperty('--baseDark', ' #181f30');\n\t\tpage.style.setProperty('--baseLight', ' #38486a');\n\t\tpage.style.setProperty('--lightText', ' #fbd888');\n\t\tpage.style.setProperty('--baseText', ' #c6ffdd');\n\t} else {\n\t\tpage.dataset.theme = '';\n\t\tthemeIcon.classList.toggle('icons__theme--moon');\n\t\tpage.style.setProperty('--baseDark', ' #fbd888');\n\t\tpage.style.setProperty('--baseLight', ' #c6ffdd');\n\t\tpage.style.setProperty('--lightText', ' #26373f');\n\t\tpage.style.setProperty('--baseText', ' #181f30');\n\t}\n}\nfunction getValueProps(selector) {\n\treturn document.querySelector(selector).checked;\n}\nfunction getFilterList(list, value) {\n\tlet temp = [];\n\tlet limit = null;\n\n\tif (!value) {\n\t\ttemp = list.slice();\n\t} else {\n\t\tif (Number.isInteger(1 * value)) {\n\t\t\tlimit = (1 * value < 6) ? limit = 6 : 1 * value;\n\t\t\ttemp = list.slice(0, limit);\n\t\t} else {\n\t\t\tlimit = null;\n\t\t\tlet reg = '[' + value.toLowerCase() + ']';\n\t\t\tlet regExp = new RegExp(reg, 'i');\n\t\t\tfor (let i = 0; i < list.length; i++) {\n\t\t\t\tif (regExp.test(list[i][1][0])) {\n\t\t\t\t\ttemp.push(list[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn temp;\n}\nfunction getWordsList(list, bool) {\n\tlet temp = list.slice();\n\tlet rev = [];\n\tif (!bool) {\n\t\treturn temp.shuffle();\n\t} else {\n\t\ttemp = temp.shuffle();\n\t\trev = temp.deepReverse();\n\t\treturn rev;\n\t}\n}\nfunction toogleElement(elem, clazz) {\n\telem.classList.toggle(clazz);\n}\nfunction addElement(elem, clazz) {\n\telem.classList.add(clazz);\n}\nfunction removeElement(elem, clazz) {\n\telem.classList.remove(clazz);\n}\nfunction getColor(value) {\n\tlet hue = ((value) * 120).toString(10);\n\treturn [\"hsl(\", hue, \",100%,50%)\"].join(\"\");\n}\nfunction setCorrect() {\n\tpercent = 0;\n\tif (currentWord > 0) {\n\t\tpercent = (100 * correctCounter / numbersTry).toFixed(1);\n\t} else {\n\t\tpercent = percent.toFixed(1);\n\t}\n\tstrPercent.textContent = percent;\n\tprogress.style.backgroundColor = getColor(percent / 100);\n\tprogress.style.width = percent + '%';\n\tif (percent === 0) {\n\t\tprogress.style.background = 'none';\n\t\tprogress.style.width = 0;\n\t}\n\n}\nfunction shuffleMulti(arr) {\n\tlet one = [];\n\tlet temp = [];\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tone[i] = i;\n\t}\n\tone.shuffle();\n\tfor (let i = 0; i < arr.length; i++) {\n\t\ttemp[i] = arr[one[i]];\n\t}\n\treturn temp;\n}\nfunction setPathSound(bool) {\n\tlet src = '';\n\tlet firstVerb = '';\n\tlet phrasal = '';\n\tnextWord = newList[currentWord];\n\tif (bool) {\n\t\tstrNewWord.textContent = nextWord[0];\n\t\tsrc = nextWord[1].substr(0, 3);\n\t\tif (src === 'irr') {\n\t\t\tfirstVerb = nextWord[0].split(',', 1).toString();\n\t\t\tpath.word = \"./audio/\" + src + '_/' + firstVerb + \".mp3\";\n\t\t} else if (src === 'phv') {\n\t\t\tphrasal = nextWord[0].replace(' ', '');\n\t\t\tpath.word = \"./audio/\" + src + '_/' + phrasal + \".mp3\";\n\t\t} else {\n\t\t\tpath.word = \"./audio/\" + src + '_/' + nextWord[0] + \".mp3\";\n\t\t}\n\n\t} else {\n\t\tstrNewWord.textContent = nextWord[0].substr(4);\n\t\tsrc = nextWord[0].substr(0, 3);\n\t\tif (src === 'irr') {\n\t\t\tfirstVerb = nextWord[1].split(',', 1).toString();\n\t\t\tpath.word = \"./audio/\" + src + '_/' + firstVerb + \".mp3\";\n\t\t} else if (src === 'phv') {\n\t\t\tphrasal = nextWord[1].replace(' ', '');\n\t\t\tpath.word = \"./audio/\" + src + '_/' + phrasal + \".mp3\";\n\t\t} else {\n\t\t\tpath.word = \"./audio/\" + src + '_/' + nextWord[1] + \".mp3\";\n\t\t}\n\t}\n}\nfunction renderWords(bool) {\n\tsetPathSound(props.engrus);\n\tif (props.game.listen && bool) {\n\t\tstrNewWord.textContent = '- - - - - - -';\n\t}\n\tif (!bool) {\n\t\tplayAudio(path.check);\n\t} else {\n\t\tplayAudio(path.word);\n\t}\n\tlet variants = [];\n\tfor (let i = 0; i < newList.length; i++) {\n\t\tif (newList[i][0] !== nextWord[0]) {\n\t\t\tvariants[variants.length] = newList[i].slice();\n\t\t}\n\t}\n\tlet tempArr = shuffleMulti(variants);\n\tlet vs = [];\n\tfor (let i = 0; i < 5; i++) {\n\t\tvs[i] = tempArr[i].slice();\n\t}\n\tvs[vs.length] = nextWord.slice();\n\tlet vss = [];\n\tfor (let i = 0; i < vs.length; i++) {\n\t\tvss[i] = vs[i].slice();\n\t}\n\tlet vssRandom = shuffleMulti(vss);\n\tif (bool) {\n\t\tfor (let i = 0; i < vssRandom.length; i++) {\n\t\t\tversions[i].textContent = vssRandom[i][1].substr(4);\n\t\t}\n\t} else {\n\t\tfor (let i = 0; i < vssRandom.length; i++) {\n\t\t\tversions[i].textContent = vssRandom[i][1];\n\t\t}\n\t}\n}\nfunction isCorrect(element, hisClass, elements, theirClass){\n\tfor (let i = 0; i < elements.length; i++) {\n\t\tif (elements[i] === element) {\n\t\t\taddElement(element, hisClass);\n\t\t\tcontinue;\n\t\t} else {\n\t\t\taddElement(elements[i], theirClass);\n\t\t}\n\t}\n}\nfunction isError(element, hisClass, elements, theirClass){\n\tfor (let i = 0; i < elements.length; i++) {\n\t\tif (elements[i] === element) {\n\t\t\taddElement(element, hisClass);\n\t\t\tsetTimeout(() => {\n\t\t\t\taddElement(elements[i], theirClass);\n\t\t\t}, 500);\n\t\t\tbreak;\n\t\t}\n\t}\n}\nfunction isStart(elements, clazz){\n\tfor (let i = 0; i < elements.length; i++) {\n\t\telements[i].classList.remove(clazz);\n\t\telements[i].classList.remove('win');\n\t\telements[i].classList.remove('lose');\n\t}\n}\nfunction checkWord() {\n\tnumbersTry++;\n\t(props.engrus)\n\t? correctWord = nextWord[1].substr(4)\n\t: correctWord = nextWord[1];\n\tlet card = this;\n\tif (card.textContent === correctWord) {\n\t\tcorrectCounter++;\n\t\tplayAudio(path.ok);\n\t\tisCorrect(card, 'win', versions, 'hidden');\n\t\tif (currentWord + 1 === limitWords) {\n\t\t\tsetTimeout(() => {\n\t\t\t\ttheEnd();\n\t\t\t}, 1000);\n\t\t}\n\t\tsetTimeout(() => {\n\t\t\twordNext();\n\t\t}, 800);\n\t} else {\n\t\tplayAudio(path.err);\n\t\tisError(card, 'lose', versions, 'hidden');\n\t}\n}\nfunction theEnd() {\n\tmodalTitle.innerHTML = titleEnd;\n\tmodalText.innerHTML = subtitleEnd;\n\tmodalData.innerHTML = percent + ' %.';\n\ttoogleElement(modal, 'modal--show');\n\ttoogleElement(menu, 'menu--show');\n}\nfunction wordNext() {\n\tisStart(versions, 'hidden');\n\tcurrentWord++;\n\tsetCorrect();\n\tif (currentWord < limitWords) {\n\t\trenderWords(props.engrus);\n\t}\n}\nfunction playAudio(path) {\n\tmp3.src = path;\n\tmp3.play();\n}\nfunction letsGo() {\n\t// remember settings\n\tprops.engrus = getValueProps('.choice__input[name=\"direction\"][data-dir=\"engrus\"]');\n\tprops.game.readAndListen = getValueProps('.choice__input[name=\"game\"][data-test=\"readandlisten\"]');\n\tprops.game.listen = getValueProps('.choice__input[name=\"game\"][data-test=\"listen\"]');\n\tprops.words.ran = getValueProps('.choice__input[name=\"words\"][data-word=\"ran\"]');\n\tprops.words.ver = getValueProps('.choice__input[name=\"words\"][data-word=\"ver\"]');\n\tprops.words.irr = getValueProps('.choice__input[name=\"words\"][data-word=\"irr\"]');\n\tprops.words.adv = getValueProps('.choice__input[name=\"words\"][data-word=\"adv\"]');\n\tprops.words.adj = getValueProps('.choice__input[name=\"words\"][data-word=\"adj\"]');\n\tprops.words.phv = getValueProps('.choice__input[name=\"words\"][data-word=\"phv\"]');\n\tprops.strFilter = document.querySelector('.submit__input').value;\n\n\tirregularVerbsList.shuffle();\n\tverbsList.shuffle();\n\tadverbsList.shuffle();\n\tadjectivesList.shuffle();\n\tphrasalVerbsList.shuffle();\n\n\t// create an array of words\n\tlet filterSumList = [];\n\tlet flag = false;\n\tif (props.words.ran) {\n\t\tlet randomList = [];\n\t\trandomList = verbsList.concat(irregularVerbsList, adverbsList, adjectivesList, phrasalVerbsList);\n\t\trandomList.shuffle();\n\t\tgetFilterList(randomList, `10`).forEach(element => {\n\t\t\tfilterSumList.push(element);\n\t\t});\n\t} else if (props.words.ver) {\n\t\tgetFilterList(verbsList, props.strFilter).forEach(element => {\n\t\t\tfilterSumList.push(element);\n\t\t});\n\t} else if (props.words.irr) {\n\t\tgetFilterList(irregularVerbsList, props.strFilter).forEach(element => {\n\t\t\tfilterSumList.push(element);\n\t\t});\n\t} else if (props.words.adv) {\n\t\tgetFilterList(adverbsList, props.strFilter).forEach(element => {\n\t\t\tfilterSumList.push(element);\n\t\t});\n\t} else if (props.words.adj) {\n\t\tgetFilterList(adjectivesList, props.strFilter).forEach(element => {\n\t\t\tfilterSumList.push(element);\n\t\t});\n\t} else if (props.words.phv) {\n\t\tgetFilterList(phrasalVerbsList, props.strFilter).forEach(element => {\n\t\t\tfilterSumList.push(element);\n\t\t});\n\t} else {\n\t\tflag = true;\n\t\tmodalTitle.innerHTML = titleStart;\n\t\tmodalText.innerHTML = '';\n\t\tmodalData.innerHTML = '';\n\t\ttoogleElement(modal, 'modal--show');\n\t}\n\tnewList = getWordsList(filterSumList, props.engrus);\n\n\t// close the start screen\n\tif (!flag) {\n\t\ttoogleElement(menu, 'menu--show');\n\n\n\t\t// display the necessary elements\n\t\tif (!props.game.readAndListen) {\n\t\t\tremoveElement(gameIcon, 'counter__icon--show');\n\t\t\taddElement(testIcon, 'counter__icon--show');\n\t\t} else {\n\t\t\tremoveElement(testIcon, 'counter__icon--show');\n\t\t\taddElement(gameIcon, 'counter__icon--show');\n\t\t}\n\n\t\t// reset counters\n\t\tlimitWords = newList.length;\n\t\tcurrentWord = 0;\n\t\tcorrectCounter = 0;\n\t\tnumbersTry = 0;\n\t\tisStart(versions, 'hidden');\n\t\tsetCorrect();\n\n\t\t// add words into fields\n\t\trenderWords(props.engrus);\n\t}\n}\n\ndocument.addEventListener('DOMContentLoaded', function () {\n\tloader = document.querySelector('.loader');\n\tpage = document.querySelector('#page');\n\tmodal = document.querySelector('.modal');\n\thelpIcon = document.querySelector('.icons__help');\n\tmodalTitle = document.querySelector('.modal__title');\n\tmodalText = document.querySelector('.modal__text');\n\tmodalData = document.querySelector('.modal__data');\n\tmodalClose = document.querySelector('.modal__close');\n\thelpIcon.addEventListener('click', function () {\n\t\tmodalTitle.innerHTML = title;\n\t\tmodalText.innerHTML = subtitle;\n\t\tmodalData.innerHTML = '';\n\t\ttoogleElement(modal, 'modal--show');\n\t});\n\tmodalClose.addEventListener('click', function () {\n\t\ttoogleElement(modal, 'modal--show');\n\t});\n\tthemeIcon = document.querySelector('.icons__theme');\n\tthemeIcon.addEventListener('click', toogleTheme);\n\tbtnNew = document.querySelector('.submit__button');\n\tbtnNew.addEventListener('click', letsGo);\n\tsound = document.querySelector('.audio__icon');\n\tsound.addEventListener('click', function(){\n\t\tplayAudio(path.word);\n\t});\n\tmenu = document.querySelector('.menu');\n\tbackIcon = document.querySelector('.counter__icon-back');\n\tbackIcon.addEventListener('click', function () {\n\t\ttoogleElement(menu, 'menu--show');\n\t});\n\tgameIcon = document.querySelector('.counter__icon-game');\n\ttestIcon = document.querySelector('.counter__icon-test');\n\tstrPercent = document.querySelector('.counter__persent-text');\n\tprogress = document.querySelector('.progress-bar');\n\tstrNewWord = document.querySelector('.ask__word');\n\tmp3 = document.querySelector('.audio');\n\tversions = document.querySelectorAll('.version__button');\n\tfor (let i = 0; i < versions.length; i++) {\n\t\tversions[i].addEventListener('click', checkWord);\n\t}\n\n\tsetTimeout(() => {\n\t\tloader.classList.add('loader--hide');\n\t\tdelLoader();\n\t}, 3500);\n\n});\n"]}